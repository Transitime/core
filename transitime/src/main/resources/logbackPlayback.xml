<!-- This is the configuration file for the logback logging system when in 
     playback mode. This file will be used if it is in the classpath (because 
     logback looks for the file logback.xml in the classpath) or if 
     explicitly invoked using the Java param 
     -Dlogback.configurationFile=/DIR/src/main/config/logbackPlayback.xml
  -->
       
<!-- Note that scanPeriod is set to 30 seconds so that config file will
     be automatically reloaded if needed and take effect every 30 seconds.
  -->
<configuration scan="true" scanPeriod="30 seconds" >

  <!-- Set properties here. NOTE: it is expected that the property
       -Dtransitime.core.agencyId=xx will be set. Also, if want logging
       to use the proper timezone then need to set the timezone property
       to something like -Dlogback.timezone=America/Los_Angeles . Valid 
       timezone format is at http://en.wikipedia.org/wiki/List_of_tz_zones
    -->

  <!-- Need to use TIMESTAMP when using FileAppender instead of
       RollingFileAppender -->
  <timestamp key="TIMESTAMP" datePattern="yyyy/MM/dd" />

  <property name="LOG_FILE_ROOT" 
            value="${transitime.logging.dir:-/Logs}/${transitime.core.agencyId:-DEFAULT}/playback/" />

  <!-- The pattern layout how the log file should log info is set here. Note that 
       a newline is used at beginning so that there is a blank line between
       each entry. Newline needs to be at beginning so stack traces for exceptions
       are displayed properly since they are displayed after the message.
       Info on layouts is out http://logback.qos.ch/manual/layouts.html .
       The timezone for logging is set using the Java property 
       -Dlogback.timezone=America/New_York or such. Timezone formats are described
       at http://en.wikipedia.org/wiki/List_of_tz_zones .
    -->
  <property name="DEFAULT_PATTERN" value="%n%d{HH:mm:ss.SSS, ${logback.timezone:-America/Los_Angeles}} PLAYBACK %-5level [%logger{10}:%line] %msg%n" />

  <property name="DEBUG_PATTERN"   value="%n%d{HH:mm:ss.SSS, ${logback.timezone:-America/Los_Angeles}} PLAYBACK %-5level [%logger{10}:%line] %msg%n" />

  <property name="DATA_PATTERN" value="%n%d{HH:mm:ss.SSS, ${logback.timezone:-America/Los_Angeles}} PLAYBACK %msg%n" />
      
  <!-- For logging to stdout logback status message for when logback is initializing
    -->
  <!-- <statusListener class="ch.qos.logback.core.status.OnConsoleStatusListener" /> -->

  <!-- The main appender for the Core module. use a RollingFileAppender
       so that can store log files in a calendar based directory structure
       logs/yyyy/MM/dd/logFile.log . The logs go under the project directory
       so in Eclipse on Windows they end up in a place such as 
       C:/Users/Mike/git/testProject/testProject/logs... The log file
       is called "core.log". The files are rolled over at
       midnight since "dd" specify that logs should be dealt with daily. 
       Logs are compressed automatically since "gz" specified.
    -->
  <appender name="CORE" class="ch.qos.logback.core.FileAppender">
    <file>${LOG_FILE_ROOT}/${TIMESTAMP}/core.log</file>

    <!-- Only want this appender to take effect if not DEBUG level. This
         way when DEBUG level the CORE_DEBUG can instead handle things
         and use more verbose logging that could be useful for debugging.
      -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>DEBUG</level>
      <onMatch>DENY</onMatch>
      <onMismatch>ACCEPT</onMismatch>
    </filter>

    <encoder>
      <!-- Info on possible patterns is at 
           http://logback.qos.ch/manual/layouts.html#ClassicPatternLayout
        -->
      <charset>UTF-8</charset>
      <pattern>${DEFAULT_PATTERN}</pattern> 
    </encoder>
  </appender>



  <!-- For debugging probably want to log additional info so the
       pattern is enhanced. Otherwise it should be identical to 
       the CORE appender.
    -->
  <appender name="CORE_DEBUG" class="ch.qos.logback.core.FileAppender">
    <file>${LOG_FILE_ROOT}/${TIMESTAMP}/core.log</file>

    <!-- Only want this appender to take effect if DEBUG level. This
         way when DEBUG level this CORE_DEBUG appender can handle things
         and use more verbose logging that could be useful for debugging.
      -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>DEBUG</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>

    <encoder>
      <!-- A more complete pattern that provides additional info for debugging.
        -->
      <charset>UTF-8</charset>
      <pattern>${DEBUG_PATTERN}</pattern>
    </encoder>
  </appender>

  <!-- Separate file for config parameters logging -->
  <appender name="CONFIG" class="ch.qos.logback.core.FileAppender">
    <file>${LOG_FILE_ROOT}/${TIMESTAMP}/configParams.log</file>
    <encoder>
      <charset>UTF-8</charset>
      <pattern>${DATA_PATTERN}</pattern>
    </encoder>
  </appender>

  <!-- Separate file for AVL logging -->
  <appender name="AVL" class="ch.qos.logback.core.FileAppender">
    <file>${LOG_FILE_ROOT}/${TIMESTAMP}/avl.log</file>
    <encoder>
      <charset>UTF-8</charset>
      <pattern>${DEFAULT_PATTERN}</pattern>
    </encoder>
  </appender>

  <!-- Separate file for ArrivalDeparture logging -->
  <appender name="ARRIVAL_DEPARTURE" class="ch.qos.logback.core.FileAppender">
    <file>${LOG_FILE_ROOT}/${TIMESTAMP}/arrivalDeparture.log</file>
    <encoder>
      <charset>UTF-8</charset>
      <pattern>${DATA_PATTERN}</pattern>
    </encoder>
  </appender>

  <!-- Separate file for VehicleEvents logging -->
  <appender name="VEHICLE_EVENT" class="ch.qos.logback.core.FileAppender">
    <file>${LOG_FILE_ROOT}/${TIMESTAMP}/vehicleEvents.log</file>
    <encoder>
      <charset>UTF-8</charset>
      <pattern>${DATA_PATTERN}</pattern>
    </encoder>
  </appender>

  <!-- Separate file for Prediction logging -->
  <appender name="PREDICTION" class="ch.qos.logback.core.FileAppender">
    <file>${LOG_FILE_ROOT}/${TIMESTAMP}/prediction.log</file>
    <encoder>
      <charset>UTF-8</charset>
      <pattern>${DATA_PATTERN}</pattern>
    </encoder>
  </appender>

  <!-- Separate file for Match logging -->
  <appender name="MATCH" class="ch.qos.logback.core.FileAppender">
    <file>${LOG_FILE_ROOT}/${TIMESTAMP}/match.log</file>
    <encoder>
      <charset>UTF-8</charset>
      <pattern>${DATA_PATTERN}</pattern>
    </encoder>
  </appender>

  <!-- In case easiest to write logs to console.  -->
  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <encoder>
      <charset>UTF-8</charset>
      <pattern>${DATA_PATTERN}</pattern>
    </encoder>
  </appender>

  
  <!--======================================================-->
  <!--=============== Loggers defined here =================-->
  <!--======================================================-->

  <!-- Specify various loggers. This where the logging
       level is specified for each class. Note: cannot just have
       two loggers defined for a name in order to define different
       logging types depending on the level. Only the last definition is used
       when duplicating the logging for a name. But can use filters as shown in
       http://stackoverflow.com/questions/5653062/how-can-i-configure-logback-to-log-different-levels-for-a-logger-to-different-de
    -->

  <!-- For all the data logging files. Note: additivity must be set
       to false so that data only logged to the data files instead
       of also to the core logging file.
    -->
  <logger name="org.transitime.db.structs.ArrivalDeparture" 
          level="info" additivity="false">
    <appender-ref ref="ARRIVAL_DEPARTURE" />
  </logger>

  <logger name="org.transitime.db.structs.VehicleEvent" 
          level="info" additivity="false">
    <appender-ref ref="VEHICLE_EVENT" />
  </logger>

  <logger name="org.transitime.core.PredictionGeneratorDefaultImpl" 
          level="info" additivity="false">
    <appender-ref ref="PREDICTION" />
  </logger>

  <logger name="org.transitime.db.structs.Match" 
          level="info" additivity="false">
    <appender-ref ref="MATCH" />
  </logger>

  <logger name="org.transitime.avl" 
          level="info" additivity="false">
    <appender-ref ref="AVL" />
  </logger>

  <logger name="org.transitime.config"
          level="info" additivity="false">
    <appender-ref ref="CONFIG" />
  </logger>

  <!-- In order to log the hibernate SQL queries need to set org.hibernate.SQL
       to debug. To show the values of the parameters need to set
       org.hibernate.type to trace. Probably also want to set in 
       hibernate.cfg.xml the properties format_sql and use_sql_comments 
       to true so that the output of the SQL looks nice and includes the 
       SQL comments. 

       NOTE: Turning on this logging can greaty slow things down.
       When inserting 10000 rows of AVLReports the time increated
       from about 2.5 seconds to 10 seconds when the sql logging
       was enabled. So don't use all the time!
    -->
  <!-- 
  <logger name="org.hibernate.SQL" level="debug" additivity="true">
    <appender-ref ref="CORE_DEBUG" />
  </logger>
  -->

 <!-- For logging the parameter values for the SQL -->
  <!--
  <logger name="org.hibernate.type.descriptor.sql.BasicBinder"
          level="trace" additivity="false">
    <appender-ref ref="SQL" />
  </logger>
  -->

  <!-- for debugging lazy loading -->
  <logger name="org.transitime.db.structs" level="debug" additivity="true">
    <appender-ref ref="CORE_DEBUG" />
  </logger>

  <!-- Miscellaneous debugging. Need to set additivity to true
       so that will still get info and error level messages even
       though CORE and CORE_DEBUG have filters to only show
       proper info. 
    -->
  <logger name="org.transitime.gtfs" 
   level="debug" additivity="true">
    <appender-ref ref="CORE_DEBUG" />
  </logger>

  <logger name="org.transitime.core.AvlProcessor" 
   level="debug" additivity="true">
    <appender-ref ref="CORE_DEBUG" />
  </logger>

  <logger name="org.transitime.core.MatchProcessor" 
   level="debug" additivity="true">
    <appender-ref ref="CORE_DEBUG" />
  </logger>

  <logger name="org.transitime.core.TemporalMatcher" 
   level="debug" additivity="true">
    <appender-ref ref="CORE_DEBUG" />
  </logger>

  <logger name="org.transitime.core.SpatialMatcher" 
   level="debug" additivity="true">
    <appender-ref ref="CORE_DEBUG" />
  </logger>

<!-- TravelTimes are verbose, even for playback mode
  <logger name="org.transitime.core.TravelTimes" 
   level="debug" additivity="true">
    <appender-ref ref="CORE_DEBUG" />
  </logger>
-->

  <logger name="org.transitime.core.ArrivalDepartureGeneratorDefaultImpl" 
   level="debug" additivity="true">
    <appender-ref ref="CORE_DEBUG" />
  </logger>


  <!-- Set default level of root logger to "info" instead of to the
       the default of "debug". This way the default is to only see important
       messages. Debug messages have to be enabled by creating a logger
       for the class. Was originally hoping to log errors to stdout but
       this interfered with other loggers. If another logger level was set
       to debug then for that class the message would also be logged via root
       even though the logging level for root is configured to be info, 
       which is a higher level.
    -->
  <root level="info">          
    <appender-ref ref="CORE" />
  </root>
</configuration>
