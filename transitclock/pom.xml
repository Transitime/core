<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>TheTransitClock</groupId>
		<artifactId>transitclock</artifactId>
		<version>2.0.45-cs</version>
	</parent>
	<artifactId>transitclockCore</artifactId>
	<name>transitclockCore</name>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>
	<repositories>
		<!-- Needed to fix problem with one-jar not working with AWS SDK. Was getting
                error message "Fatal: Failed to load the internal config for AWS" -->
		<repository>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
			<id>bintray-kevinlee-maven</id>
			<name>bintray</name>
			<url>http://dl.bintray.com/kevinlee/maven</url>
		</repository>
	</repositories>
	<pluginRepositories>
		<pluginRepository>
			<id>repo.obaweb.org</id>
			<url>http://repo.camsys-apps.com/releases</url>
		</pluginRepository>
	</pluginRepositories>
	<dependencies>
		<dependency>
			<groupId>TheTransitClock</groupId>
			<artifactId>transitclockBarefootClient</artifactId>
			<version>2.0.45-cs</version>
		</dependency>
		<dependency>
			<groupId>TheTransitClock</groupId>
			<artifactId>transitclockTraccarClient</artifactId>
			<version>2.0.45-cs</version>
		</dependency>
		<dependency>
			<groupId>com.esri.geometry</groupId>
			<artifactId>esri-geometry-api</artifactId>
			<version>1.1</version>
		</dependency>
		<!-- Needed to fix problem with one-jar not working with AWS SDK. Was getting
                error message "Fatal: Failed to load the internal config for AWS" -->
		<dependency>
			<groupId>com.simontuffs</groupId>
			<artifactId>one-jar-boot</artifactId>
			<version>0.97.3</version>
		</dependency>
		<!-- Database related, including c3p0 production quality connector. Note:
                have found that can have problems if don't use similar versions. Can have
                trouble finding the c3p0 connection pooler for example if use old hibernate-core
                but new c3p0. -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.49</version>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>9.3-1103-jdbc41</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>4.3.9.Final</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate.common</groupId>
			<artifactId>hibernate-commons-annotations</artifactId>
			<version>4.0.5.Final</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-c3p0</artifactId>
			<version>4.3.9.Final</version>
		</dependency>
		<!-- hibernate-core loads in really old version of xml-apis so load in
                newer version explicitly. Otherwise get problems with the Node class. -->
		<dependency>
			<groupId>xml-apis</groupId>
			<artifactId>xml-apis</artifactId>
			<version>1.4.01</version>
		</dependency>
		<!-- For logging -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.2.3</version>
		</dependency>
		<dependency>
			<groupId>org.hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
			<version>2.3.2</version>
		</dependency>
		<!-- So can use Amazon API for archiving files and such -->
		<dependency>
			<groupId>com.amazonaws</groupId>
			<artifactId>aws-java-sdk</artifactId>
			<version>1.10.16</version>
		</dependency>
		<!-- For many java utilities, such as StringEscapeUtils -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.3.2</version>
		</dependency>
		<!-- For processing XML files, such as for AVL feeds -->
		<dependency>
			<groupId>org.jdom</groupId>
			<artifactId>jdom</artifactId>
			<version>2.0.2</version>
		</dependency>
		<!-- For GTFS-realtime feed -->
		<dependency>
			<groupId>com.google.transit</groupId>
			<artifactId>gtfs-realtime-bindings</artifactId>
			<version>0.0.4</version>
		</dependency>
		<!-- For more easily handling command line options -->
		<dependency>
			<groupId>commons-cli</groupId>
			<artifactId>commons-cli</artifactId>
			<version>1.2</version>
		</dependency>
		<!-- I believe not needed <dependency> <groupId>org.apache.lucene</groupId>
                <artifactId>lucene-core</artifactId> <version>3.6.2</version> </dependency> -->
		<!-- For JMS for fancy handling of AVL feeds -->
		<dependency>
			<groupId>org.hornetq</groupId>
			<artifactId>hornetq-core-client</artifactId>
			<version>2.3.25.Final</version>
		</dependency>
		<dependency>
			<groupId>org.hornetq</groupId>
			<artifactId>hornetq-jms-client</artifactId>
			<version>2.3.25.Final</version>
		</dependency>
		<!-- For Amigocloud web sockets AVL feed -->
		<dependency>
			<groupId>org.java-websocket</groupId>
			<artifactId>Java-WebSocket</artifactId>
			<version>1.3.0</version>
		</dependency>
		<!-- For processing JSON. Needed for Amigocloud and other JSON based AVL
                feeds. NOTE: the version 20141113 does not work with Java 1.7, which is what
                is still the normal version of Java for AWS, at least as of June 2015. Need
                to use old version 20140107 which was compiled with Java 1.7 instead of Java
                1.8 -->
		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
			<version>20140107</version>
		</dependency>
		<!-- For parsing CSV files, such as GTFS ones -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-csv</artifactId>
			<version>1.1</version>
		</dependency>
		<!-- For concurrency annotations like @Immutable and @ThreadSave from the
                "Concurrency in Practice" book need library -->
		<dependency>
			<groupId>net.jcip</groupId>
			<artifactId>jcip-annotations</artifactId>
			<version>1.0</version>
		</dependency>
		<!-- For encryption/decryption -->
		<dependency>
			<groupId>org.jasypt</groupId>
			<artifactId>jasypt</artifactId>
			<version>1.9.2</version>
		</dependency>
		<!-- So can send out monitoring related e-mails -->
		<dependency>
			<groupId>javax.mail</groupId>
			<artifactId>mail</artifactId>
			<version>1.4.7</version>
		</dependency>
		<dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils</artifactId>
			<version>1.9.2</version>
		</dependency>
		<!-- JUnit testing of course -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>3.2.4</version>
			<scope>test</scope>
		</dependency>
		<!-- Used for reflection to find classes in package -->
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>18.0</version>
		</dependency>
		<dependency>
			<groupId>org.ehcache</groupId>
			<artifactId>ehcache</artifactId>
			<version>3.4.0</version>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.esotericsoftware/kryo -->
		<dependency>
			<groupId>com.esotericsoftware</groupId>
			<artifactId>kryo</artifactId>
			<version>4.0.0</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-jcs-core -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-jcs-core</artifactId>
			<version>2.2</version>
		</dependency>
		<!-- Servlet related functionality -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.0.1</version>
			<scope>provided</scope>
		</dependency>
		<!--  OLS regression algorithm -->
		<dependency>
			<groupId>com.github.haifengl</groupId>
			<artifactId>smile-core</artifactId>
			<version>1.5.1</version>
		</dependency>
		<!-- Logback log appender for AWS CloudWatch -->
		<dependency>
			<groupId>com.j256.cloudwatchlogbackappender</groupId>
			<artifactId>cloudwatchlogbackappender</artifactId>
			<version>1.11</version>
		</dependency>
		<!--  OLS regression algorithm -->
		<dependency>
			<groupId>com.github.haifengl</groupId>
			<artifactId>smile-core</artifactId>
			<version>1.5.1</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/net.spy/spymemcached -->
		<dependency>
			<groupId>net.spy</groupId>
			<artifactId>spymemcached</artifactId>
			<version>2.12.3</version>
		</dependency>


	</dependencies>
	<build>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.5.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<executions>
					<execution>
						<id>shade-UpdateTravelTimes</id>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<transformers>
								<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>org.transitclock.applications.UpdateTravelTimes</mainClass>
								</transformer>
							</transformers>
							<shadedArtifactAttached>true</shadedArtifactAttached>
							<shadedClassifierName>UpdateTravelTimes</shadedClassifierName>
						</configuration>
					</execution>
					<execution>
						<id>shade-Core</id>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<transformers>
								<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>org.transitclock.applications.Core</mainClass>
								</transformer>
							</transformers>
							<shadedArtifactAttached>true</shadedArtifactAttached>
							<shadedClassifierName>Core</shadedClassifierName>
						</configuration>
					</execution>
					<execution>
						<id>shade-SchemaGenerator</id>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<transformers>
								<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>org.transitclock.applications.SchemaGenerator</mainClass>
								</transformer>
							</transformers>
							<shadedArtifactAttached>true</shadedArtifactAttached>
							<shadedClassifierName>SchemaGenerator</shadedClassifierName>
						</configuration>
					</execution>
					<execution>
						<id>shade-ScheduleGenerator</id>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<transformers>
								<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>org.transitclock.applications.ScheduleGenerator</mainClass>
								</transformer>
							</transformers>
							<shadedArtifactAttached>true</shadedArtifactAttached>
							<shadedClassifierName>ScheduleGenerator</shadedClassifierName>
						</configuration>
					</execution>
					<execution>
						<id>shade-GtfsFileProcessor</id>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<transformers>
								<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>org.transitclock.applications.GtfsFileProcessor</mainClass>
								</transformer>
							</transformers>
							<shadedArtifactAttached>true</shadedArtifactAttached>
							<shadedClassifierName>GtfsFileProcessor</shadedClassifierName>
						</configuration>
					</execution>
					<execution>
						<id>shade-RmiQuery</id>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<transformers>
								<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>org.transitclock.applications.RmiQuery</mainClass>
								</transformer>
							</transformers>
							<shadedArtifactAttached>true</shadedArtifactAttached>
							<shadedClassifierName>RmiQuery</shadedClassifierName>
						</configuration>
					</execution>
					<execution>
						<id>shade-CreateAPIKey</id>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<transformers>
								<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>org.transitclock.applications.CreateAPIKey</mainClass>
								</transformer>
							</transformers>
							<shadedArtifactAttached>true</shadedArtifactAttached>
							<shadedClassifierName>CreateAPIKey</shadedClassifierName>
						</configuration>
					</execution>
					<execution>
						<id>shade-CreateWebAgency</id>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<transformers>
								<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>org.transitclock.applications.CreateWebAgency</mainClass>
								</transformer>
							</transformers>
							<shadedArtifactAttached>true</shadedArtifactAttached>
							<shadedClassifierName>CreateWebAgency</shadedClassifierName>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<executions>
					<!-- core deploy -->
					<execution>
						<id>make-assembly</id>
						<!-- this is used for inheritance merges -->
						<phase>package</phase>
						<!-- bind to the packaging phase -->
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<descriptorRefs>
								<descriptorRef>jar-with-dependencies</descriptorRef>
							</descriptorRefs>
							<archive>
								<manifest>
									<mainClass>org.transitclock.applications.Core</mainClass>
								</manifest>
							</archive>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.5</version>
					<!-- By default, we exclude anything in the org.transitclock.integration_tests
                                package from regular unit test -->
					<configuration>
						<excludes>
							<exclude>**/*IntegrationTest.java</exclude>
						</excludes>
						<systemProperties>
							<property>
								<name>log4j.configuration</name>
								<value>log4j-stdout.xml</value>
							</property>
						</systemProperties>
						<argLine>${argLine}</argLine>
					</configuration>
					<executions>
						<!-- Instead, we add a special integration-test execution that
                                      runs any tests in the org.transitclock.integration_tests package -->
						<execution>
							<id>integration-tests</id>
							<phase>integration-test</phase>
							<goals>
								<goal>test</goal>
							</goals>
							<configuration>
								<skip>false</skip>
								<excludes>
									<exclude>none</exclude>
								</excludes>
								<includes>
									<include>**/*IntegrationTest.java</include>
								</includes>
								<!-- Don't stop the build if integration tests fail because
                                                  we still want post-integration-test cleanup to run -->
								<testFailureIgnore>false</testFailureIgnore>
							</configuration>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
	<profiles>
		<profile>
			<id>runCore</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.1.1</version>
						<executions>
							<execution>
								<phase>test</phase>
								<goals>
									<goal>java</goal>
								</goals>
								<configuration>
									<mainClass>org.transitclock.applications.Core</mainClass>
									<arguments>
										<argument>arg0</argument>
										<argument>arg1</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>dbTest</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.1.1</version>
						<executions>
							<execution>
								<phase>test</phase>
								<goals>
									<goal>java</goal>
								</goals>
								<configuration>
									<mainClass>org.transitclock.applications.DbTest</mainClass>
									<arguments>
										<argument>arg0</argument>
										<argument>arg1</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>PredictionsAccuracyIntegrationTest</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>truezip-maven-plugin</artifactId>
						<version>1.2</version>
						<executions>
							<execution>
								<id>unzip-database</id>
								<goals>
									<goal>copy</goal>
								</goals>
								<phase>test</phase>
								<configuration>
									<verbose>true</verbose>
									<fileset>
										<directory>${project.basedir}/src/test/resources/database/transitime_test.zip</directory>
										<outputDirectory>${project.basedir}/src/test/resources/database/data</outputDirectory>
									</fileset>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.onebusaway.plugins</groupId>
						<artifactId>maven-hsqldb-plugin</artifactId>
						<!-- version 1.0.1 supports hsqldb 2.3.2 -->
						<version>1.0.1</version>
						<executions>
							<execution>
								<id>user-database-start</id>
								<phase>test</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<deleteOnEntry>true</deleteOnEntry>
									<dbName>${project.basedir}/src/test/resources/database/data/transitime_test</dbName>
									<port>9001</port>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.1.1</version>
						<executions>
							<execution>
								<phase>test</phase>
								<id>test-case-execution</id>
								<goals>
									<goal>java</goal>
								</goals>
								<configuration>
									<mainClass>org.transitclock.applications.PredictionsAccuracyIntegrationTest</mainClass>
									<commandlineArgs>-c transitclock/src/test/resources/transiTimeConfigIntegrationTest.xml -gtfsDirectoryName transitclock/src/test/resources/wmata_gtfs -storeNewRevs -maxTravelTimeSegmentLength 1000</commandlineArgs>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>

